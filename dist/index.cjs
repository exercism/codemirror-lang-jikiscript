'use strict';

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_LowercaseIdentifier = {__proto__:null,assert:38, case:40, const:42, external:44, fn:46, if:48, import:50, type:52, let:54, panic:56, pub:58, todo:60, use:62, opaque:64};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!jO!nOPOOOOOO'#C_'#C_O!uOQO'#CeOOOO'#Cl'#ClOOOO'#Ci'#CiO!}OPO'#CkQOOOOOOOOO'#Cg'#CgOOOO,59P,59PO#UOPO,59POOOO-E6g-E6gOOOO1G.k1G.k",
  stateData: "#g~OQSOSPOTPOUPOVPOWPOYSO[SOaQOcVOdVOeVOfVOgVOhVOiVOjVOkVOlVOmVOnVOoVOpVOqSO~O^_P~PQOaWObXO~O^_X~PQOaZO~OaWTUVSYQ[qS~",
  goto: "saPPPbPPPPPbPfPjPpfTROTTSOTQTORYTRUO",
  nodeNames: "âš  Program Comment Number Decimal Hex Octal Binary Float String UppercaseIdentifier Keyword LowercaseIdentifier",
  maxTerm: 33,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "=y~RdOr!ars#xs}!a}!O$P!O!P!a!P!Q1Q!Q!R3}!R![5r![!c!a!c!}6q!}#O!a#O#P8m#P#R!a#R#S9O#S#T!a#T#o<g#o;'S!a;'S;=`=l;=`<%l=t<%lO!aR!hUbQqPOr!zs#O!z#O#P#c#P;'S!z;'S;=`#r<%lO!zQ#PUbQOr!zs#O!z#O#P#c#P;'S!z;'S;=`#r<%lO!zQ#fSrs!z#b#c!z#f#g!z#h#i!zQ#uP;=`<%l!z~$POa~qPR$WZbQqPOr!zs!Q!z!Q!R$y!R![*O![#O!z#O#P#c#P#R!z#R#S0V#S;'S!z;'S;=`#r<%lO!zR%QhbQSPOr!zs!O!z!O!P&l!P!Q!z!Q![*O![!d!z!d!e*{!e!q!z!q!r,g!r!z!z!z!{.R!{#O!z#O#P#c#P#R!z#R#S*O#S#U!z#U#V*{#V#c!z#c#d,g#d#l!z#l#m.R#m;'S!z;'S;=`#r<%lO!zR&s[bQWPOr!zs!Q!z!Q![&l![#O!z#O#P#c#P#R!z#R#S&l#S#X!z#X#Y'i#Y;'S!z;'S;=`#r<%lO!zR'n[bQOr!zs}!z}!O(d!O!Q!z!Q![)X![#O!z#O#P#c#P#R!z#R#S)X#S;'S!z;'S;=`#r<%lO!zR(iYbQOr!zs!Q!z!Q![)X![#O!z#O#P#c#P#R!z#R#S)X#S;'S!z;'S;=`#r<%lO!zR)`YbQWPOr!zs!Q!z!Q![)X![#O!z#O#P#c#P#R!z#R#S)X#S;'S!z;'S;=`#r<%lO!zR*V[bQSPOr!zs!O!z!O!P&l!P!Q!z!Q![*O![#O!z#O#P#c#P#R!z#R#S*O#S;'S!z;'S;=`#r<%lO!zR+QYbQOr!zs!Q!z!Q!S+p!S#O!z#O#P#c#P#R!z#R#S+p#S;'S!z;'S;=`#r<%lO!zR+wYbQVPOr!zs!Q!z!Q!S+p!S#O!z#O#P#c#P#R!z#R#S+p#S;'S!z;'S;=`#r<%lO!zR,lYbQOr!zs!Q!z!Q!Y-[!Y#O!z#O#P#c#P#R!z#R#S-[#S;'S!z;'S;=`#r<%lO!zR-cYbQUPOr!zs!Q!z!Q!Y-[!Y#O!z#O#P#c#P#R!z#R#S-[#S;'S!z;'S;=`#r<%lO!zR.W^bQOr!zs!Q!z!Q![/S![!c!z!c!i/S!i#O!z#O#P#c#P#R!z#R#S/S#S#T!z#T#Z/S#Z;'S!z;'S;=`#r<%lO!zR/Z^bQTPOr!zs!Q!z!Q![/S![!c!z!c!i/S!i#O!z#O#P#c#P#R!z#R#S/S#S#T!z#T#Z/S#Z;'S!z;'S;=`#r<%lO!zR0[[bQOr!zs!O!z!O!P&l!P!Q!z!Q![0V![#O!z#O#P#c#P#R!z#R#S0V#S;'S!z;'S;=`#r<%lO!zR1XWbQqPOr!zs!P!z!P!Q1q!Q#O!z#O#P#c#P;'S!z;'S;=`#r<%lO!zR1xXbQQPOY1qYZ!zZr1qrs2es#O1q#O#P2|#P;'S1q;'S;=`3w<%lO1qP2jSQPOY2eZ;'S2e;'S;=`2v<%lO2eP2yP;=`<%l2eR3R[QPOY2eZr2ers1qs#b2e#b#c1q#c#f2e#f#g1q#g#h2e#h#i1q#i;'S2e;'S;=`2v<%lO2eR3zP;=`<%l1qR4WhbQSPqPOr!zs!O!z!O!P&l!P!Q!z!Q![*O![!d!z!d!e*{!e!q!z!q!r,g!r!z!z!z!{.R!{#O!z#O#P#c#P#R!z#R#S*O#S#U!z#U#V*{#V#c!z#c#d,g#d#l!z#l#m.R#m;'S!z;'S;=`#r<%lO!zR5{[bQSPqPOr!zs!O!z!O!P&l!P!Q!z!Q![*O![#O!z#O#P#c#P#R!z#R#S*O#S;'S!z;'S;=`#r<%lO!zR6z[bQYPqPOr!zs!Q!z!Q![7p![!c!z!c!}7p!}#O!z#O#P#c#P#T!z#T#o7p#o;'S!z;'S;=`#r<%lO!zR7w[bQYPOr!zs!Q!z!Q![7p![!c!z!c!}7p!}#O!z#O#P#c#P#T!z#T#o7p#o;'S!z;'S;=`#r<%lO!zR8rSqPrs!z#b#c!z#f#g!z#h#i!zR9X`bQ[PqPOr!zs!O!z!O!P&l!P!Q!z!Q![:Z![!c!z!c!};d!}#O!z#O#P#c#P#R!z#R#S:Z#S#T!z#T#o;d#o;'S!z;'S;=`#r<%lO!zR:b`bQ[POr!zs!O!z!O!P&l!P!Q!z!Q![:Z![!c!z!c!};d!}#O!z#O#P#c#P#R!z#R#S:Z#S#T!z#T#o;d#o;'S!z;'S;=`#r<%lO!zR;k^bQ[POr!zs!Q!z!Q![;d![!c!z!c!};d!}#O!z#O#P#c#P#R!z#R#S;d#S#T!z#T#o;d#o;'S!z;'S;=`#r<%lO!zR<p^bQ[PqPOr!zs!Q!z!Q![;d![!c!z!c!};d!}#O!z#O#P#c#P#R!z#R#S;d#S#T!z#T#o;d#o;'S!z;'S;=`#r<%lO!zR=qPqP;=`<%l!aP=yOqP",
  tokenizers: [0, 1],
  topRules: {"Program":[0,1]},
  specialized: [{term: 12, get: (value) => spec_LowercaseIdentifier[value] || -1}],
  tokenPrec: 103
});

const jikiscriptLanguage = language.LRLanguage.define({
    name: "jikiscript",
    parser: parser.configure({
        props: [
            highlight.styleTags({
                String: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                Char: highlight.tags.character,
                "Integer SpecialNumber": highlight.tags.number,
                "Floating Fraction": highlight.tags.float,
                "( )": highlight.tags.paren,
                "[ ]": highlight.tags.squareBracket,
                "{ }": highlight.tags.brace,
                Escape: highlight.tags.escape,
                Identifier: highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
                Signature: highlight.tags.meta,
                Glyph: highlight.tags.atom,
            }),
        ],
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        commentTokens: { line: "#" },
    },
});
function jikiscript() {
    return new language.LanguageSupport(jikiscriptLanguage);
}

exports.jikiscript = jikiscript;
exports.jikiscriptLanguage = jikiscriptLanguage;
