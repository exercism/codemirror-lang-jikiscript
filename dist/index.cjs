'use strict';

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,function:10, do:14, end:16, with:18, set:22, to:24, is:40, equals:42, "==":44, ">":48, "<":50, ">=":52, "<=":54, change:58, repeat:62, times:64, repeat_until_game_over:68, if:72, else:76, return:80};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "(jQYQPOOOOQO'#Da'#DaOOQO'#Ck'#CkO!TQPO'#CkOOQO'#Ci'#CiOOQO'#D`'#D`O!iQPO'#D`OOQO'#DV'#DVOOQO'#D]'#D]OOQO'#DW'#DWQYQPOOO$]QPO'#C_O$bQPO'#CfO$gQPO'#CxO!TQPO'#CzO$lQPO'#C}O!TQPO'#DPO!TQPO'#DTO$qQPO,59VO!TQPO,59UO!TQPO,59_OOQO-E7U-E7UO$vQPO,58yO%OQPO,59QO%TQPO,59dO%YQPO,59fO%_QPO'#CbOOQO,59i,59iO%fQPO,59kOOQO,59o,59oOOQO1G.q1G.qOOQO1G.p1G.pOOQO1G.y1G.yOOQO1G.e1G.eO%kQPO1G.eO!TQPO1G.lO!TQPO1G/OO$lQPO1G/QO%pQPO,58|OOQO,58|,58|O%wQPO1G/VOOQO1G/V1G/VO&RQPO'#D^O$lQPO7+$POOQO7+$W7+$WOOQO7+$j7+$jOOQO7+$l7+$lOOQO1G.h1G.hO&ZQPO7+$qO$lQPO'#DROOQO7+$q7+$qO&eQPO'#DXO&jQPO,59xOOQO<<Gk<<GkOOQO<<H]<<H]OOQO,59m,59mOOQO,59s,59sOOQO-E7V-E7V",
  stateData: "&y~O!OOSPOS~OSQOTZOZ[O`QOaQObPOcPOm]Oo^Or_Ot`OxaO!URO~OSQO`QOaQObPOcPO!URO~OdcOecOfcOhdOidOjdOkdOS!SXT!SXZ!SX`!SXa!SXb!SXc!SXm!SXo!SXr!SXt!SXx!SX|!SX!U!SX!V!SXp!SXV!SXW!SXv!SX~OSfO~OSgO~OShO~OVjO~O!VnO~OVjOXrO~O[sO~O[tO~OpuO~OWwO~PYOVxO~OSzO~OW!PO~PYOWwOv!RO~PYO!R!TOV!QX~OW!POv!RO~PYOS!YO~O!R!TOV!Qa~O`Sacba~",
  goto: "%f!UPPP!VPP!_PPP!VPP!q#P#_PPPPPPP#PPPPP!VP!VPP!VP!VP#sP!VP!V#y$XPPP$_$gP$j%U]WOYjvx!QQk_QqfQylQ!OuQ!V{R!X!RiTORY^`ajstvx!QiSORY^`ajstvx!QhUORY^`ajstvx!QQocRpdQ!SxR!W!QQYOUeYv!QQvjR!QxQ!UzR!Z!U]XOYjvx!QR{r[VOYjvx!QQbRQi^Ql`QmaQ|sR}tmQORY^`acdjstvx!Q",
  nodeNames: "âš  LineComment Program FunctionDefinition Identifier function Body do end with VariableDefinition set to BinaryExpression EqualityExpression PrimaryExpression Boolean String Integer Floating is equals == RelationalExpression > < >= <= VariableReassignment change RepeatStatement repeat times RepeatUntilGameOverStatement repeat_until_game_over IfStatement if ElseStatement else ReturnStatement return ExpressionStatement",
  maxTerm: 53,
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: "*]~RgX^!jpq!jrs#_xy${yz%Q|}%V}!O%[!P!Q%{!Q![%b!c!}&j#T#Y&j#Y#Z&{#Z#h&j#h#i)]#i#o&j#y#z!j$f$g!j#BY#BZ!j$IS$I_!j$I|$JO!j$JT$JU!j$KV$KW!j&FU&FV!j~!oY!O~X^!jpq!j#y#z!j$f$g!j#BY#BZ!j$IS$I_!j$I|$JO!j$JT$JU!j$KV$KW!j&FU&FV!j~#bVOr#_rs#ws#O#_#O#P#|#P;'S#_;'S;=`$u<%lO#_~#|Oa~~$PRO;'S#_;'S;=`$Y;=`O#_~$]WOr#_rs#ws#O#_#O#P#|#P;'S#_;'S;=`$u;=`<%l#_<%lO#_~$xP;=`<%l#_~%QO!U~~%VO!V~~%[O!R~~%_P!Q![%b~%gQb~!O!P%m!Q![%b~%pP!Q![%s~%xPc~!Q![%s~&OP!P!Q&R~&WSP~OY&RZ;'S&R;'S;=`&d<%lO&R~&gP;=`<%l&R~&oSS~!Q![&j!c!}&j#R#S&j#T#o&j~'QTS~!Q![&j!c!}&j#R#S&j#T#U'a#U#o&j~'fUS~!Q![&j!c!}&j#R#S&j#T#`&j#`#a'x#a#o&j~'}US~!Q![&j!c!}&j#R#S&j#T#g&j#g#h(a#h#o&j~(fUS~!Q![&j!c!}&j#R#S&j#T#X&j#X#Y(x#Y#o&j~)PS`~S~!Q![&j!c!}&j#R#S&j#T#o&j~)bUS~!Q![&j!c!}&j#R#S&j#T#f&j#f#g)t#g#o&j~)yUS~!Q![&j!c!}&j#R#S&j#T#i&j#i#j(a#j#o&j",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  specialized: [{term: 4, get: (value) => spec_Identifier[value] || -1}],
  tokenPrec: 264
});

const addIndent = (context) => context.lineIndent(context.node.from) + context.unit; // Indent for function body
const removeIndent = (context) => context.lineIndent(context.node.from);
const jikiscriptLanguage = language.LRLanguage.define({
    name: "jikiscript",
    parser: parser.configure({
        props: [
            highlight.styleTags({
                String: highlight.tags.string,
                Boolean: highlight.tags.bool,
                LineComment: highlight.tags.lineComment,
                Integer: highlight.tags.number,
                Floating: highlight.tags.float,
                "do end": highlight.tags.keyword,
                "set change to": highlight.tags.keyword,
                "function with": highlight.tags.definitionKeyword,
                "repeat repeat_until_game_over times": highlight.tags.keyword,
                "if else": highlight.tags.keyword,
                "is equals": highlight.tags.keyword,
                "return": highlight.tags.keyword,
                Identifier: highlight.tags.variableName,
                ArgumentList: highlight.tags.variableName,
                "( )": highlight.tags.paren
                /*
                "( )": t.paren,
                "[ ]": t.squareBracket,
                "{ }": t.brace,
                Escape: t.escape,
                Identifier: t.function(t.definition(t.variableName)),
                Signature: t.meta,
                Glyph: t.atom,*/
            }),
            language.indentNodeProp.add({
                FunctionDefinition: addIndent,
                IfStatement: addIndent,
                ElseStatement: addIndent,
                RepeatStatement: addIndent,
                RepeatUntilGameOverStatement: addIndent,
                statement: addIndent, // Indent for nested statements
                EndStatement: removeIndent, // Reset for end statements
            }),
            language.foldNodeProp.add({
                FunctionDefinition: language.foldInside, // Allow folding of function blocks
                IfStatement: language.foldInside, // Allow folding of function blocks
            }),
        ],
    }),
    // languageData: {
    //   closeBrackets: { brackets: ["(", "[", "do", '"'] },
    //   commentTokens: { line: "//" },
    // },
});
function jikiscript() {
    return new language.LanguageSupport(jikiscriptLanguage);
}

exports.jikiscript = jikiscript;
exports.jikiscriptLanguage = jikiscriptLanguage;
