'use strict';

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,log:10, is:42, equals:44, and:50, or:52, not:74, function:78, do:80, end:82, with:84, set:88, to:90, change:94, repeat:100, times:102, repeat_until_game_over:106, repeat_forever:110, for:114, each:116, in:118, if:122, else:124, return:128};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: ".pQYQPOOO!QQPO'#ChOOQO'#Do'#DoOOQO'#Dw'#DwOOQO'#Dp'#DpQYQPOOQ!VQPO'#DvO![QPO'#C_O!yQPO'#DSO#OQPO'#DXO#TQPO'#D[O![QPO'#D_O#YQPO'#DbO#YQPO'#DdO#_QPO'#DfO![QPO'#DjO![QPO'#DmOOQO'#Dv'#DvO#dQPO,59SOOQO-E7n-E7nOOQO,5:b,5:bO![QPO'#CgO$VQQO'#CdO%YQPO'#ClOOQO'#Dz'#DzOOQO'#Cd'#CdO%aQQO'#CbOOQO'#Dx'#DxO![QPO'#DQOOQO'#Cb'#CbOOQO,58y,58yO&wQPO,59nO'PQPO,59sO'UQPO,59vO'^QPO,59yO'cQPO'#EWOOQO,59|,59|OOQO,5:O,5:OO'hQPO,5:QO'mQPO,5:UOOQO,5:X,5:XO'rQPO'#DyOOQO1G.n1G.nO'zQPO1G.nO(PQPO,59ROOQO,59W,59WO(UQPO,59WOOQO'#Cs'#CsO(rQPO,58}OOQO'#Cw'#CwOOQO'#Cx'#CxOOQO'#Cy'#CyOOQO'#Cz'#CzOOQO'#C{'#C{OOQO'#C|'#C|OOQO'#DO'#DOOOQO'#DP'#DPO![QPO,59`OOQO,59l,59lOOQO1G/Y1G/YO(yQPO1G/YO![QPO1G/_O![QPO1G/bO)OQPO1G/dO#YQPO1G/eO)TQPO,5:rO)[QPO1G/lO)aQPO'#EWOOQO1G/p1G/pO![QPO'#DqO)fQPO,5:eOOQO7+$Y7+$YOOQO1G.m1G.mO)nQPO1G.rOOQO1G.r1G.rO#kQPO'#CdOOQO1G.i1G.iOOQO1G.z1G.zO)vQPO'#EYO#YQPO7+$tOOQO7+$y7+$yOOQO7+$|7+$|O![QPO7+%OOOQO7+%P7+%PO*OQPO1G0^OOQO1G0^1G0^O![QPO7+%WO*VQPO,5:rOOQO,5:],5:]OOQO-E7o-E7oOOQO7+$^7+$^O*aQPO'#DrO*fQPO,5:tOOQO<<H`<<H`OOQO<<Hj<<HjOOQO7+%x7+%xO#YQPO<<HrO*nQPO1G0^O*xQPO1G0aOOQO,5:^,5:^OOQO-E7p-E7pOOQOAN>^AN>^O*xQPO7+%{OOQO7+%{7+%{OOQO<<Ig<<Ig",
  stateData: "+Z~O!iOSPOS~OSPOTVOwWO|XO!PYO!SZO!V[O!X]O!Z^O!__O!b`O!{aO~OYbO~O!{dO~OSfOYeO_gOaiObiOchOdhOulO!ylO~OSoO~OSpO~OSqO~OxsO~O![vO~OXzO~P![OYbO!gWX!{WX!TWXxWXXWX]WX^WX~OeWXfWXiWXjWXqWX!oWX!pWX!qWX!rWX!sWX!tWX!uWX!vWX!wWX!xWX~P#kO^}O~P![Oe!QOf!QOi!ZOj!ZOq!ZO!o!PO!p!PO!q!RO!r!SO!s!TO!t!UO!u!VO!v!WO!w!XO!x!YO!gUX!{UX!TUXxUXXUX]UX^UX~OxsOz!^O~O}!_O~O_gO}!`O~O!T!bO~O!{!cO~OS!dO~Ox!eO~O]!gOX!mX~OX!iO~OX!jO~O]!gO^!lO~OYeO_gOaiObiOchOdhO~OS!mO~P(^OS!pO~O}!tO~Oy!wO~PYO!]!xO~O!{!yO~O]!gOX!ma~O]!gO^!|O~O]!}Ox!|X~Oy#RO~PYOy!wO!`#UO~PYOS#VO~O]!}Ox!|a~Oy#RO!`#YO~PYOxsO!__O~OPdcqaSbq~",
  goto: "(t#OPPP#PPP#X$T$ePP$x%ZPPP%tPPPPPP&Y$TPP&]&]&]&]&]&]P&]&]&`P#PPPPP#PPP#PP#P#PPP#PP#PP#PPPP&pPP#PP#P'O'^'hPPP'n'v&`(O$xPPPPPPPPPPP(RP(n(q]ROT!c!v!y#TQnVQrZQw_Qx`QybQ|eQ!OgQ![lQ!o!ZQ!r!_Q!s!`Q!z!gQ#Q!tR#S!xmkVZ_`begl!Z!_!`!g!t!xljVZ_`begl!Z!_!`!g!t!xR!n!QoiVZ_`begl!Q!Z!_!`!g!t!x[QOT!c!v!y#ToiVZ_`begl!Q!Z!_!`!g!t!xniVZ_`begl!Q!Z!_!`!g!t!xR!aqR!QjR!ZjmmVZ_`begl!Z!_!`!g!t!x[ROT!c!v!y#TQ#Z#UR#[#YQTOUcT!v#TQ!v!cR#T!yQ!hyQ!k!OT!{!h!kQ#O!pR#W#O]SOT!c!v!y#T]UOT!c!v!y#TR{bQt[Qu]Q!]oQ!fwQ!u!bQ#P!qQ#X#SQ#Z#UR#[#YR!q!^R!fw",
  nodeNames: "âš  LineComment Program LogStatement Identifier log Expression EqualityExpression PrimaryExpression ) ( GroupingExpression CallExpression , ] [ ListExpression Boolean String Integer Floating is equals CompareOp RelationalExpression and or CompareOp CompareOp CompareOp CompareOp ArithOp ArithOp ArithOp ArithOp ArithOp UnaryExpression not FunctionDefinition function do end with SetVariableStatement set to ChangeVariableStatement change ChangeListElementStatement RepeatStatement repeat times RepeatUntilGameOverStatement repeat_until_game_over RepeatForeverStatement repeat_forever ForeachStatement for each in IfStatement if else ReturnStatement return CallStatement",
  maxTerm: 91,
  nodeProps: [
    ["openedBy", 9,"(",14,"["],
    ["closedBy", 10,")",15,"]"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 3,
  tokenData: "+h~RhYZ!mpq!rqr!wrs#Uuv$rxy$wyz$|z{%R{|%W|}%]}!O%b!P!Q&T!Q![%j!^!_&t!_!`'R!`!a'^!c!}'k!}#O'|#P#Q(R#T#Y'k#Y#Z(W#Z#h'k#h#i*h#i#o'k~!rO!{~~!wO!i~R!|P!yP!_!`#PQ#UO!pQ~#XVOr#Urs#ns#O#U#O#P#s#P;'S#U;'S;=`$l<%lO#U~#sOb~~#vRO;'S#U;'S;=`$P;=`O#U~$SWOr#Urs#ns#O#U#O#P#s#P;'S#U;'S;=`$l;=`<%l#U<%lO#U~$oP;=`<%l#U~$wO!x~~$|OY~~%ROX~~%WO!u~~%]O!v~~%bO]~R%gP!wQ!Q![%jP%oQcP!O!P%u!Q![%jP%xP!Q![%{P&QPdP!Q![%{~&YPq~!P!Q&]~&bSP~OY&]Z;'S&];'S;=`&n<%lO&]~&qP;=`<%l&]~&yP!r~!_!`&|~'RO!t~~'UP!_!`'X~'^O!o~~'cP!q~!_!`'f~'kO!s~~'pSS~!Q!['k!c!}'k#R#S'k#T#o'k~(RO_~~(WO^~~(]TS~!Q!['k!c!}'k#R#S'k#T#U(l#U#o'k~(qUS~!Q!['k!c!}'k#R#S'k#T#`'k#`#a)T#a#o'k~)YUS~!Q!['k!c!}'k#R#S'k#T#g'k#g#h)l#h#o'k~)qUS~!Q!['k!c!}'k#R#S'k#T#X'k#X#Y*T#Y#o'k~*[Sa~S~!Q!['k!c!}'k#R#S'k#T#o'k~*mUS~!Q!['k!c!}'k#R#S'k#T#f'k#f#g+P#g#o'k~+UUS~!Q!['k!c!}'k#R#S'k#T#i'k#i#j)l#j#o'k",
  tokenizers: [0, 1],
  topRules: {"Program":[0,2]},
  specialized: [{term: 4, get: (value) => spec_Identifier[value] || -1}],
  tokenPrec: 462
});

const addIndent = (context) => context.lineIndent(context.node.from) + context.unit; // Indent for function body
const removeIndent = (context) => context.lineIndent(context.node.from);
const jikiscriptLanguage = language.LRLanguage.define({
    name: "jikiscript",
    parser: parser.configure({
        strict: false, // Toggle for sanity!
        props: [
            highlight.styleTags({
                String: highlight.tags.string,
                Boolean: highlight.tags.bool,
                LineComment: highlight.tags.lineComment,
                Integer: highlight.tags.number,
                Floating: highlight.tags.float,
                "repeat times repeat_until_game_over repeat_forever": highlight.tags.controlKeyword,
                "if else do end log": highlight.tags.controlKeyword,
                "for each in": highlight.tags.controlKeyword,
                "with to": highlight.tags.controlKeyword,
                "return": highlight.tags.controlKeyword,
                "function set change": highlight.tags.definitionKeyword,
                "and or is equals not": highlight.tags.logicOperator,
                ArithOp: highlight.tags.arithmeticOperator,
                CompareOp: highlight.tags.compareOperator,
                "> < >= <= ==": highlight.tags.operator,
                bangOperator: highlight.tags.operator,
                UnaryExpression: highlight.tags.operator,
                Identifier: highlight.tags.variableName,
                ArgumentList: highlight.tags.variableName,
                "( ) ,": highlight.tags.paren,
                "[ ]": highlight.tags.squareBracket
            }),
            language.indentNodeProp.add({
                FunctionDefinition: addIndent,
                IfStatement: addIndent,
                ElseStatement: addIndent,
                RepeatStatement: addIndent,
                RepeatUntilGameOverStatement: addIndent,
                statement: addIndent, // Indent for nested statements
                EndStatement: removeIndent, // Reset for end statements
            }),
            language.foldNodeProp.add({
                FunctionDefinition: language.foldInside, // Allow folding of function blocks
                IfStatement: language.foldInside, // Allow folding of function blocks
            }),
        ],
    })
    // languageData: {
    //   closeBrackets: { brackets: ["(", "[", "do", '"'] },
    // }
    //   commentTokens: { line: "//" },
    // },
});
function jikiscript() {
    return new language.LanguageSupport(jikiscriptLanguage);
}
const jikiscriptStrict = language.LRLanguage.define({
    name: "jikiscriptStrict",
    parser: parser.configure({
        strict: true,
    }),
});

exports.jikiscript = jikiscript;
exports.jikiscriptLanguage = jikiscriptLanguage;
exports.jikiscriptStrict = jikiscriptStrict;
