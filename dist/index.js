import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,function:10, do:12, with:14, set:18, to:20, change:32, return:36, end:40};
const parser = LRParser.deserialize({
  version: 14,
  states: "$zQYQPOOOOQO'#C{'#C{OOQO'#Cz'#CzOOQO'#Cq'#CqOOQO'#Cw'#CwOOQO'#Cr'#CrQYQPOOOzQPO'#C_O!PQPO'#CdO!UQPO'#CkO!ZQPO'#CmOOQO'#Co'#CoOOQO-E6p-E6pO!lQPO,58yO!tQPO,59OO!yQPO,59VOOQO,59X,59XOOQO1G.e1G.eO#OQPO1G.eO!ZQPO1G.jO!ZQPO1G.qO#TQPO'#CxO#]QPO7+$POOQO7+$U7+$UOOQO7+$]7+$]O#bQPO'#CsO#gQPO,59dOOQO<<Gk<<GkOOQO,59_,59_OOQO-E6q-E6q",
  stateData: "#v~OjOSPOS~OSQOTVOXWOZQO[QO]PO^PO`XObYOdZO~OS]O~OS^O~OS_O~OSQOZQO[QO]PO^PO~OUaOVbO~OYcO~OYdO~OSeO~OmiOUlX~OUkO~OSlO~OmiOUla~OZS[^][~",
  goto: "!npPPPqPPPPqPPPPPPqPqPqPqu{PPP!R!VP!Y!gTSOUQUOR[UQjeRmjTTOURfbSROUQ`YQgcRhdZQOUYcd",
  nodeNames: "âš  LineComment Program FunctionDefinition Identifier function do with VariableDefinition set to Boolean String Integer Floating VariableReassignment change ReturnStatement return EndStatement end ExpressionStatement",
  maxTerm: 31,
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: "){~ReX^!dpq!drs#X|}$u}!O$z!P!Q%k!Q![%Q!c!}&Y#T#Y&Y#Y#Z&k#Z#h&Y#h#i({#i#o&Y#y#z!d$f$g!d#BY#BZ!d$IS$I_!d$I|$JO!d$JT$JU!d$KV$KW!d&FU&FV!d~!iYj~X^!dpq!d#y#z!d$f$g!d#BY#BZ!d$IS$I_!d$I|$JO!d$JT$JU!d$KV$KW!d&FU&FV!d~#[VOr#Xrs#qs#O#X#O#P#v#P;'S#X;'S;=`$o<%lO#X~#vO[~~#yRO;'S#X;'S;=`$S;=`O#X~$VWOr#Xrs#qs#O#X#O#P#v#P;'S#X;'S;=`$o;=`<%l#X<%lO#X~$rP;=`<%l#X~$zOm~~$}P!Q![%Q~%VQ]~!O!P%]!Q![%Q~%`P!Q![%c~%hP^~!Q![%c~%nP!P!Q%q~%vSP~OY%qZ;'S%q;'S;=`&S<%lO%q~&VP;=`<%l%q~&_SS~!Q![&Y!c!}&Y#R#S&Y#T#o&Y~&pTS~!Q![&Y!c!}&Y#R#S&Y#T#U'P#U#o&Y~'UUS~!Q![&Y!c!}&Y#R#S&Y#T#`&Y#`#a'h#a#o&Y~'mUS~!Q![&Y!c!}&Y#R#S&Y#T#g&Y#g#h(P#h#o&Y~(UUS~!Q![&Y!c!}&Y#R#S&Y#T#X&Y#X#Y(h#Y#o&Y~(oSZ~S~!Q![&Y!c!}&Y#R#S&Y#T#o&Y~)QUS~!Q![&Y!c!}&Y#R#S&Y#T#f&Y#f#g)d#g#o&Y~)iUS~!Q![&Y!c!}&Y#R#S&Y#T#i&Y#i#j(P#j#o&Y",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  specialized: [{term: 4, get: (value) => spec_Identifier[value] || -1}],
  tokenPrec: 123
});

const jikiscriptLanguage = LRLanguage.define({
    name: "jikiscript",
    parser: parser.configure({
        props: [
            styleTags({
                String: tags.string,
                Boolean: tags.bool,
                LineComment: tags.lineComment,
                Integer: tags.number,
                Floating: tags.float,
                "function set change": tags.definitionKeyword,
                "with do to return end": tags.keyword,
                Identifier: tags.variableName,
                ArgumentList: tags.variableName,
                "( )": tags.paren
                /*
                "( )": t.paren,
                "[ ]": t.squareBracket,
                "{ }": t.brace,
                Escape: t.escape,
                Identifier: t.function(t.definition(t.variableName)),
                Signature: t.meta,
                Glyph: t.atom,*/
            }),
            indentNodeProp.add({
                FunctionDefinition: context => {
                    console.log("JHERE");
                    console.log(context.unit);
                    return context.lineIndent(context.node.from) + context.unit; // Indent for function body
                },
                statement: context => context.lineIndent(context.node.from) + context.unit, // Indent for nested statements
                EndStatement: context => context.lineIndent(context.node.from), // Reset for end statements
            }),
            foldNodeProp.add({
                FunctionDefinition: foldInside, // Allow folding of function blocks
            }),
        ],
    }),
    // languageData: {
    //   closeBrackets: { brackets: ["(", "[", "do", '"'] },
    //   commentTokens: { line: "//" },
    // },
});
function jikiscript() {
    return new LanguageSupport(jikiscriptLanguage);
}

export { jikiscript, jikiscriptLanguage };
