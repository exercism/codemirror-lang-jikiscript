import { LRParser } from '@lezer/lr';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "%^QYQPOOO#RQPO'#C_O#YQPO'#C_O#aQPO'#CqOOQO'#Ca'#CaOOQO'#C|'#C|O$eQPO'#CgOOQO'#Cr'#CrO$oQPO'#CiOOQO'#Cq'#CqOOQO'#Ck'#CkQYQPOOO$tQPO'#ClO%{QPO,58yOOQO,58y,58yO&SQPO,58yO!WQPO'#CmO&ZQPO,58yO'hQPO,59ROOQO,59R,59RO'hQPO,59RO'oQPO,59TOOQO-E6i-E6iOOQO-E6j-E6jOOQO1G.e1G.eOOQO,59X,59XOOQO-E6k-E6kOOQO1G.m1G.mO'vQPO1G.mO'}QPO1G.oO!WQPO1G.oOOQO7+$X7+$XO)RQPO7+$Z",
  stateData: "*_~OdOSPOS~OSVOUTOVTOWTOXTOYVO^WOgPOiQOlSOmSOnSOoSOrUO~OSVOUTOVTOWTOXTOYVOgPOiQOlSOmSOnSOoSOrUO~Oh^O~P!WOj^O~P!WOk`OSeXUeXVeXWeXXeXYeX^eXbeXgeXieXleXmeXneXoeXreX~O[dOqcO~P!WOseO~Ok`OS`XU`XV`XW`XX`XY`Xg`Xh`Xi`Xl`Xm`Xn`Xo`Xr`Xj`Xq`X~OhhO~P!WOjhO~P!WOk`OSRaURaVRaWRaXRaYRa^RabRagRaiRalRamRanRaoRarRahRajRaqRa~OqkO~P!WO[nO~P!WOqoO~P!WOk`OS]iU]iV]iW]iX]iY]i^]ib]ig]ii]il]im]in]io]ir]i~Ok`OS]qU]qV]qW]qX]qY]q^]qb]qg]qi]ql]qm]qn]qo]qr]q~O^[WVUYV~",
  goto: "#eqPPPrPrPPPPPrP!RP!V!]!oPPP!x!|PPPPPPPPPrkVOPQUZ]_`bdelnTXOZQZORfZQ]PQ_QQbUWg]_blRldWaR[mpRjaTYOZSROZ`[PQU]_bdlQi`QmeRpn",
  nodeNames: "âš  LineComment Program Array String Char Integer Floating Fraction SpecialNumber Glyph Inline Signature Binding Identifier",
  maxTerm: 35,
  skippedNodes: [0,1],
  repeatNodeCount: 3,
  tokenData: "6]~R$OX^*Rpq*Rrs*vst,dtu,{xy-vyz-{{|.Q}!O.Q!O!P.Q!P!Q.Q!Q![.V![!].Q!^!_.Q!_!`.Q!`!a.Q!a!b.Q!b!c/|!c!}4O!}#O4o#P#Q4t#R#S4y#T#o4O#o#p5O#p#q5T#q#r5t#y#z*R$f$g*R$j$k.Q$r$s.Q$u$v5y$v$w.Q$w$x.Q%o%p.Q&a&b.Q0z0{.Q5o5p6R5x5y6R5|5}6R#BY#BZ*R$IS$I_*R$Im$In.Q$I|$JO*R$JT$JU*R$Jk$Jl.Q$KV$KW*R$Kw$Kx.Q$Lc$Ld.Q$Np$Nq.Q%#t%#u6W%#|%#}.Q%#}%$O.Q%$Z%$[.Q%$]%$^.Q%$e%$f.Q%$q%$r.Q%%S%%T.Q%%i%%j.Q%&[%&].Q%&b%&c.Q%&d%&e.Q%&r%&s.Q%&t%&u.Q%&x%&y6R%&z%&{.Q%'R%'S.Q%'T%'U.Q%'V%'W.Q%'a%'b.Q%'k%'l.Q%'y%'z.Q%(^%(_.Q%(_%(`.Q%(b%(c.Q%(c%(d.Q%)Q%)R.Q%)R%)S.Q%)_%)`.Q%)c%)d.Q%)e%)f.Q%)g%)h.Q%)i%)j.Q%)j%)k.Q%)k%)l.Q%)l%)m.Q%)n%)o.Q%)o%)p.Q%)q%)r.Q%)r%)s.Q%)s%)t.Q%*Y%*Z.Q%*g%*h.Q%*w%*x.Q%+c%+d.Q%+y%+z.Q%+|%+}.Q%,O%,P.Q%,Z%,[.Q%,c%,d.Q%,{%,|.Q%-^%-_.Q%-a%-b.Q%-g%-h.Q%-n%-o.Q%-r%-s.Q%-t%-u.Q%-z%-{.Q%-{%-|.Q%-|%-}.Q%-}%.O.Q%.R%.S.Q%2v%2w.Q%:c%:d.Q%:u%:v.Q%;P%;Q.Q%;Z%;[.Q%;`%;a.Q%;t%;u.Q%;u%;v.Q%<P%<Q.Q%<U%<V.Q%<Y%<Z.Q%<_%<`.Q%<e%<f.Q%<m%<n.Q%>w%>x.Q%?^%?_.Q%Fv%Fw.Q%Mq%Mr.Q%Mr%Ms.Q%Nb%Nc.Q&#V&#W.Q&#e&#f.Q&$m&$n.Q&%p&%q.Q&*x&*y.Q&<O&<P.Q&FU&FV*R~*WYd~X^*Rpq*R#y#z*R$f$g*R#BY#BZ*R$IS$I_*R$I|$JO*R$JT$JU*R$KV$KW*R&FU&FV*R~*yVOr*vrs+`s#O*v#O#P+e#P;'S*v;'S;=`,^<%lO*v~+eOS~~+hRO;'S*v;'S;=`+q;=`O*v~+tWOr*vrs+`s#O*v#O#P+e#P;'S*v;'S;=`,^;=`<%l*v<%lO*v~,aP;=`<%l*v~,iSP~OY,dZ;'S,d;'S;=`,u<%lO,d~,xP;=`<%l,d~-ORpq-Xrs*vtu-p~-^SS~OY-XZ;'S-X;'S;=`-j<%lO-X~-mP;=`<%l-X~-sPpq-X~-{Or~~.QOq~~.VOY~~.[TU~!O!P.k!P!Q.y!Q![.V!g!h/b#X#Y/b~.nP!Q![.q~.vPV~!Q![.q~.|Q!Q![/S$u$v/[~/XPW~!Q![/S~/_P!Q![/S~/eR{|/n}!O/n!Q![/t~/qP!Q![/t~/yPU~!Q![/t~0PTO#O0`#O#P0e#P;'S0`;'S;=`3v;=`O0`~0eOo~~0jZo~!Q!R1]#O#P1]#U#V1]#Y#Z1]#b#c1]#f#g1]#g#h1]#h#i1]#i#j1b#j#k1]#l#m3X~1bOn~~1eS!Q![1q!c!i1q#T#Z1q#o#p2l~1tR!Q![1}!c!i1}#T#Z1}~2QR!Q![2Z!c!i2Z#T#Z2Z~2^R!Q![2g!c!i2g#T#Z2g~2lOm~~2oR!Q![2x!c!i2x#T#Z2x~2{S!Q![2x!c!i2x#T#Z2x#q#r2g~3[R!Q![3e!c!i3e#T#Z3e~3hR!Q![3q!c!i3q#T#Z3q~3vOl~~3{Po~;=`<%l0`~4TR^~!c!}4O#R#S4^#T#o4O~4aQ!Q![4g#R#S4^~4lP^~!Q![4g~4tOg~~4yOh~~5OOk~~5TOi~~5WP!Q![5Z~5`Q[~!O!P5f!Q![5Z~5iP!Q![5l~5qP[~!Q![5l~5yOj~~6OPY~!Q![.V~6WOX~~6]Os~",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 421
});

const jikiscriptLanguage = LRLanguage.define({
    name: "jikiscript",
    parser: parser.configure({
        props: [
            styleTags({
                String: tags.string,
                LineComment: tags.lineComment,
                Char: tags.character,
                "Integer SpecialNumber": tags.number,
                "Floating Fraction": tags.float,
                "( )": tags.paren,
                "[ ]": tags.squareBracket,
                "{ }": tags.brace,
                Escape: tags.escape,
                Identifier: tags.function(tags.definition(tags.variableName)),
                Signature: tags.meta,
                Glyph: tags.atom,
            }),
        ],
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        commentTokens: { line: "#" },
    },
});
function jikiscript() {
    return new LanguageSupport(jikiscriptLanguage);
}

export { jikiscript, jikiscriptLanguage };
