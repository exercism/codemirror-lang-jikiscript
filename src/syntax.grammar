@top Program { newLineDelimitedStatementOrNewline* statement? }

@skip { " " | LineComment }

newLineDelimitedStatementOrNewline {
  newLineDelimitedStatement | newLine
}

newLine { "\n" }
newLineDelimitedStatement { statement newLine }

statement {
  FunctionDefinition |
  SetVariableStatement |
  ChangeVariableStatement |
  RepeatStatement |
  RepeatUntilGameOverStatement |
  IfStatement |
  ReturnStatement |
  CallStatement { CallExpression }
}

FunctionDefinition {
  keyword<"function"> Identifier Body |
  keyword<"function"> Identifier keyword<"with"> parameterList Body
}

parameterList {
  Identifier ("," Identifier)*
}
RepeatStatement {
  keyword<"repeat"> Expression keyword<"times"> Body
}

RepeatUntilGameOverStatement {
  keyword<"repeat_until_game_over"> Body
}

IfStatement {
  // keyword<"if"> Expression keyword<"do"> statement* ElseStatement | 
  keyword<"if"> Expression (IfElseBody | Body)
}

ElseStatement {
  keyword<"else"> Body
}

IfElseBody {
  keyword<"do"> newLine newLineDelimitedStatement* keyword<"else"> (Body | IfStatement)
}

Body {
  keyword<"do"> newLine newLineDelimitedStatement* keyword<"end">
}

ReturnStatement {
  keyword<"return"> (Expression)
}

SetVariableStatement {
  keyword<"set"> Identifier keyword<"to"> Expression
}
ChangeVariableStatement {
  keyword<"change"> Identifier keyword<"to"> Expression
}

Expression {
  BinaryExpression |
  PrimaryExpression
}

PrimaryExpression {
  GroupingExpression |
  CallExpression |
  Identifier |
  Boolean |
  String |
  number
}

GroupingExpression { 
  "(" Expression ")"
}

RelationalExpression {
  PrimaryExpression operator<">"> Expression |
  PrimaryExpression operator<"<"> Expression |
  PrimaryExpression operator<">="> Expression |
  PrimaryExpression operator<"<="> Expression |
  PrimaryExpression operator<"*"> Expression | 
  PrimaryExpression operator<"+"> Expression | 
  PrimaryExpression operator<"/"> Expression | 
  PrimaryExpression operator<"-"> Expression | 
  PrimaryExpression operator<"%"> Expression 
}

EqualityExpression {
  PrimaryExpression keyword<"is"> PrimaryExpression |
  PrimaryExpression keyword<"equals"> PrimaryExpression |
  PrimaryExpression operator<"=="> PrimaryExpression
}

BinaryExpression {
  EqualityExpression |
  RelationalExpression
}

CallExpression {
  Identifier "(" argumentList? ")"
}
argumentList {
  Expression ("," Expression)*
}


number { Integer | Floating }

keyword<term> { @specialize[@name={term}]<Identifier, term> }
operator<term> { @specialize[@name={term}]<Symbol, term> }
/*Keyword {
  keyword<"function"> |
  keyword<"do"> |
  keyword<"with"> |
  keyword<"return"> |
  keyword<"set"> |
  keyword<"to"> |
  keyword<"change"> |
  keyword<"end">
}*/

@tokens {
  Identifier { letter $[_a-zA-Z0-9]* }
  Symbol { $[+\-\*\/><=]+ }
  String { '"' (!["\\] | "\\" _)* '"' }
  Boolean { "true" | "false" }
  LineComment { "//" ![\n]* }

  letter { @asciiLetter }
  digit { @digit }

  Integer { "-"? digit+ }
  Floating { "-"? digit+ "." digit+ }

  @precedence { 
    LineComment,Floating, Integer, Symbol, Boolean, Identifier, String
  }
}

@detectDelim