@top Program { statement* }

@skip { whitespace | LineComment }

statement {
  FunctionDefinition |
  VariableDefinition |
  VariableReassignment |
  ReturnStatement |
  EndStatement |
  ExpressionStatement { expression }
}

FunctionDefinition {
  keyword<"function"> Identifier keyword<"do"> |
  keyword<"function"> Identifier keyword<"with"> argumentList keyword<"do">
}

ReturnStatement {
  keyword<"return"> (expression)
}

VariableDefinition {
  keyword<"set"> Identifier keyword<"to"> expression
}
VariableReassignment {
  keyword<"change"> Identifier keyword<"to"> expression
}

EndStatement {
  keyword<"end">
}

argumentList {
  Identifier ("," Identifier)*
}

expression {
  Identifier |
  Boolean |
  String |
  number
}

number { Integer | Floating }

keyword<term> { @specialize[@name={term}]<Identifier, term> }

@tokens {
  Identifier { letter+ ((digit | letter)+)? }
  String { '"' (!["\\] | "\\" _)* '"' }
  Boolean { "true" | "false" }
  LineComment { "//" ![\n]* }
  whitespace { @whitespace+ }

  letter { @asciiLetter }
  digit { @digit }

  Integer { "-"? digit+ }
  Floating { "-"? digit+ "." digit+ }

  @precedence { 
    Boolean, Identifier, String, Floating, Integer 
  }
}

@detectDelim

/*

@skip { whitespace | LineComment }

statement {
  expression //|
  // Binding
}

expression {
  String | 
  number //|
  // Inline
}


number { Integer | Floating }

// Inline { "(" Signature? expression* ")" }


@tokens {
  whitespace { @whitespace+ }
  digit { @digit }

  Integer { "-"? digit+ }
  Floating { "-"? digit+ "." digit+ }

  String { quotedString } //| rawString }
  quotedString { "$"? '"' (!["\\] | Escape)* '"'}
  Escape { "\\" _ }


  LineComment { "//" ![\n]* }

  @precedence { Identifier, Signature, Floating, Integer }
}
/*
statement {
  expression |
  Binding
}

expression {
  Array |
  String | 
  Char | 
  number |
  Glyph |
  Inline
}


Char { hexChar | unicodeChar | escapeChar | char }

Binding { Identifier "←" Signature? expression }


@precedence {
  // Define precedence if needed for underscore
  underscore @left 
}

Array {
  "[" expression* "]" |
  "{" expression* "}" |
  expression (!underscore "_" expression)+
}

@tokens {
  letter { @asciiLetter }
  hex { @digit | $[a-fA-F] }

  Fraction { "¯"? digit+ "/" "¯"? digit+ }
  SpecialNumber { $[ηπτ∞] }
  
  hexChar { "@\\x" hex hex}
  unicodeChar {"@\\u" (hex hex hex hex | "{" hex+ "}") }
  escapeChar { "@\\" $[0nrtbfvs\\] }
  char { "@" _ }

  rawString { "$"? "$ " ![\n]*+ }

  Glyph { $[◠⌵+⌝’⍤∠˜◡⋯∩□⊓⊸⍩⌈⑄⊛ℂ◇⊟◴∂♭⊙÷⍢↘.∵=⍖⬚⌕⊢¤:⌊∧⊃⋅≥>⊕∘⊗∫⍚⊂▽⊣⧻≤<ₙ⦷≍↥∊∈↧◿×¯¬≠⌅⤚⟜⤸⋕⊜⊡◌ⁿ⚂⇡⍥☇↯⇌⍏↻⁅≡⊏△±∿⍆√\?\-⨬⊞↙⸮⍉◹⍣⧅°⍜◰⊚◫⤙] }

  Signature { "|" digit+ ("." digit+)? }

  @precedence { Identifier, Signature, Fraction, Floating, Integer, Glyph }

}
*/