@top Program { (newLineDelimitedStatementOrNewline)* statement? }

@skip { " " | LineComment }

newLineDelimitedStatementOrNewline {
  newLineDelimitedStatement | newLine
}

newLine { "\n" }
newLineDelimitedStatement { statement newLine }

statement {
  LogStatement |
  FunctionDefinition |
  SetVariableStatement |
  ChangeVariableStatement |
  ChangeListElementStatement |
  ChangePropertyStatement |
  RepeatStatement |
  RepeatUntilGameOverStatement |
  RepeatForeverStatement |
  ForeachStatement |
  IfStatement |
  ReturnStatement |
  ContinueStatement |
  NextStatement |
  BreakStatement |
  CallStatement { CallExpression }
}
LogStatement {
  keyword<"log"> Expression 
}

FunctionName { myIdentifier | identifier }

FunctionDefinition {
  keyword<"function"> FunctionName body |
  keyword<"function"> FunctionName keyword<"with"> parameterList body
}
parameterList {
  Identifier ("," Identifier)*
}

SetVariableStatement {
  keyword<"set"> Identifier keyword<"to"> Expression
}

ChangeVariableStatement {
  keyword<"change"> Identifier keyword<"to"> Expression
}

ChangeListElementStatement {
  keyword<"change"> Identifier IndexExpression keyword<"to"> Expression
}
ChangePropertyStatement {
  keyword<"change"> PropertyExpression keyword<"to"> Expression
}

RepeatStatement {
  keyword<"repeat"> Expression keyword<"times"> IndexedByComponent? body
}

ForeachStatement {
  keyword<"for"> keyword<"each"> Identifier ("," Identifier)? keyword<"in"> Expression IndexedByComponent? body
}

RepeatUntilGameOverStatement {
  keyword<"repeat_until_game_over"> IndexedByComponent? body
}

RepeatForeverStatement {
  keyword<"repeat_forever"> IndexedByComponent? body
}

IndexedByComponent {
  keyword<"indexed"> keyword<"by"> Identifier
}

ContinueStatement {
  keyword<"continue">
}
NextStatement {
  keyword<"next">
}
BreakStatement {
  keyword<"break">
}

IfStatement {
  // keyddword<"if"> Expression keyword<"do"> statement* ElseStatement | 
  keyword<"if"> Expression (ifElsebody | body)
}

ifElsebody {
  keyword<"do"> newLine newLineDelimitedStatementOrNewline* keyword<"else"> (body | IfStatement)
}

body {
  keyword<"do"> newLine newLineDelimitedStatementOrNewline* keyword<"end">
}

ReturnStatement {
  keyword<"return"> (Expression)
}

Expression {
  binaryExpression |
  UnaryExpression |
  ( PrimaryExpression IndexExpression* )
}

GroupingExpression { 
  "(" Expression ")"
}

binaryExpression {
  EqualityExpression |
  RelationalExpression
}

UnaryExpression {
  keyword<"not"> Expression |
  bangOperator Expression
}

RelationalExpression {
  (PrimaryExpression | EqualityExpression) keyword<"and"> Expression |
  (PrimaryExpression | EqualityExpression) keyword<"or"> Expression |
  PrimaryExpression CompareOp<">"> Expression |
  PrimaryExpression CompareOp<"<"> Expression |
  PrimaryExpression CompareOp<">="> Expression |
  PrimaryExpression CompareOp<"<="> Expression |
  PrimaryExpression ArithOp<"*"> Expression | 
  PrimaryExpression ArithOp<"+"> Expression | 
  PrimaryExpression divide Expression | 
  PrimaryExpression ArithOp<"-"> Expression | 
  PrimaryExpression ArithOp<"%"> Expression 
}

EqualityExpression {
  PrimaryExpression keyword<"is"> PrimaryExpression |
  PrimaryExpression keyword<"equals"> PrimaryExpression |
  PrimaryExpression CompareOp<"==" | "!="> PrimaryExpression
}

PrimaryExpression {
  GroupingExpression |
  InstantiateExpression |
  CallExpression |
  MethodExpression |
  PropertyExpression |
  ListExpression |
  DictionaryExpression |
  Identifier |
  Boolean |
  String |
  number
}

ArithOp<expr> { expr }
CompareOp<expr> { expr }

MethodExpression {
  PropertyExpression "(" argumentList? ")"
}
PropertyExpression {
  Identifier "." FunctionName
}

CallExpression {
  (FunctionName) "(" argumentList? ")"
}
argumentList {
  Expression ("," Expression)*
}

IndexExpression {
  "[" Expression "]"
}
ListExpression {
  IndexExpression | 
  "[" (Expression ("," Expression)+)? "]"
}
DictionaryExpression {
  "{" "\n"? (String ":" Expression ("," "\n"? String ":" Expression)*)? "\n"? "}"
}

InstantiateExpression {
  keyword<"new"> ClassName "(" argumentList? ")"
}

number { Integer | Floating }

keyword<term> { @specialize[@name={term}]<identifier, term> }

Identifier { identifier }

@tokens {
  myIdentifier { "my#" $[a-z] $[_a-zA-Z0-9]* }
  identifier { $[a-z] $[_a-zA-Z0-9]* }
  ClassName { $[A-Z] $[_a-zA-Z0-9]* }
  String { '"' (!["\\] | "\\" _)* '"' }
  Boolean { "true" | "false" }
  LineComment { "//" ![\n]* }

  letter { @asciiLetter }
  digit { @digit }

  divide[@name=ArithOp] { "/" }

  Integer { "-"? digit+ }
  Floating { "-"? digit+ "." digit+ }

  bangOperator { "!" }

  "(" ")"
  "[" "]"
  ","

  @precedence { 
    LineComment,Floating, Integer, divide, Boolean, myIdentifier, identifier, String
  }
}

@detectDelim