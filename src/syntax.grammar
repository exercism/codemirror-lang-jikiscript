@top Program { (newLineDelimitedStatementOrNewline)* statement? }

@skip { " " | LineComment }

newLineDelimitedStatementOrNewline {
  newLineDelimitedStatement | newLine
}

newLine { "\n" }
newLineDelimitedStatement { statement newLine }

statement {
  LogStatement |
  FunctionDefinition |
  SetVariableStatement |
  ChangeVariableStatement |
  ChangeListElementStatement |
  RepeatStatement |
  RepeatUntilGameOverStatement |
  RepeatForeverStatement |
  ForeachStatement |
  IfStatement |
  ReturnStatement |
  CallStatement { CallExpression }
}
LogStatement {
  keyword<"log"> Expression 
}

FunctionDefinition {
  keyword<"function"> Identifier body |
  keyword<"function"> Identifier keyword<"with"> parameterList body
}
parameterList {
  Identifier ("," Identifier)*
}

SetVariableStatement {
  keyword<"set"> Identifier keyword<"to"> Expression
}

ChangeVariableStatement {
  keyword<"change"> Identifier keyword<"to"> Expression
}

ChangeListElementStatement {
  keyword<"change"> Identifier ListExpression keyword<"to"> Expression
}

RepeatStatement {
  keyword<"repeat"> Expression keyword<"times"> body
}

ForeachStatement {
  keyword<"for"> keyword<"each"> Identifier keyword<"in"> Expression body
}

RepeatUntilGameOverStatement {
  keyword<"repeat_until_game_over"> body
}

RepeatForeverStatement {
  keyword<"repeat_forever"> body
}

IfStatement {
  // keyword<"if"> Expression keyword<"do"> statement* ElseStatement | 
  keyword<"if"> Expression (ifElsebody | body)
}

ifElsebody {
  keyword<"do"> newLine newLineDelimitedStatementOrNewline* keyword<"else"> (body | IfStatement)
}

body {
  keyword<"do"> newLine newLineDelimitedStatementOrNewline* keyword<"end">
}

ReturnStatement {
  keyword<"return"> (Expression)
}

Expression {
  binaryExpression |
  UnaryExpression |
  PrimaryExpression
}


GroupingExpression { 
  "(" Expression ")"
}

binaryExpression {
  EqualityExpression |
  RelationalExpression
}

UnaryExpression {
  keyword<"not"> Expression |
  "!" Expression
}

RelationalExpression {
  PrimaryExpression keyword<"and"> Expression |
  PrimaryExpression keyword<"or"> Expression |
  PrimaryExpression CompareOp<">"> Expression |
  PrimaryExpression CompareOp<"<"> Expression |
  PrimaryExpression CompareOp<">="> Expression |
  PrimaryExpression CompareOp<"<="> Expression |
  PrimaryExpression ArithOp<"*"> Expression | 
  PrimaryExpression ArithOp<"+"> Expression | 
  PrimaryExpression divide Expression | 
  PrimaryExpression ArithOp<"-"> Expression | 
  PrimaryExpression ArithOp<"%"> Expression 
}

EqualityExpression {
  PrimaryExpression keyword<"is"> PrimaryExpression |
  PrimaryExpression keyword<"equals"> PrimaryExpression |
  PrimaryExpression CompareOp<"==" | "!="> PrimaryExpression
}

PrimaryExpression {
  GroupingExpression |
  CallExpression |
  ListExpression |
  Identifier |
  Boolean |
  String |
  number
}

ArithOp<expr> { expr }
CompareOp<expr> { expr }
Paren<expr> { expr }
Bracket<expr> { expr }

CallExpression {
  Identifier "(" argumentList? ")"
}
argumentList {
  Expression ("," Expression)*
}

ListExpression {
  "[" (Expression ("," Expression)*)? "]"
}

number { Integer | Floating }

keyword<term> { @specialize[@name={term}]<Identifier, term> }

@tokens {
  Identifier { letter $[_a-zA-Z0-9]* }
  String { '"' (!["\\] | "\\" _)* '"' }
  Boolean { "true" | "false" }
  LineComment { "//" ![\n]* }

  letter { @asciiLetter }
  digit { @digit }

  divide[@name=ArithOp] { "/" }

  Integer { "-"? digit+ }
  Floating { "-"? digit+ "." digit+ }

  "!"
  "(" ")"
  "[" "]"
  ","

  @precedence { 
    LineComment,Floating, Integer, divide, Boolean, Identifier, String
  }
}

@detectDelim